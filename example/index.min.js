(function(dependencies, chunks, undefined, global) {

    var cache = [];


    function Module() {
        this.id = null;
        this.filename = null;
        this.dirname = null;
        this.exports = {};
        this.loaded = false;
    }

    Module.prototype.require = require;

    function require(index) {
        var module = cache[index],
            callback, exports;

        if (module !== undefined) {
            return module.exports;
        } else {
            callback = dependencies[index];

            cache[index] = module = new Module();
            exports = module.exports;

            callback.call(exports, require, exports, module, undefined, global);
            module.loaded = true;

            return module.exports;
        }
    }

    require.resolve = function(path) {
        return path;
    };



    require.async = function async(index, callback) {
        callback(require(index));
    };



    if (typeof(define) === "function" && define.amd) {
        define([], function() {
            return require(0);
        });
    } else if (typeof(module) !== "undefined" && module.exports) {
        module.exports = require(0);
    } else {

        require(0);

    }
}([
    function(require, exports, module, undefined, global) {
        /* index.js */

        global.ejs = require(1);


        ejs.render("template.ejs", {
            cache: true,
            locals: {
                list: [{
                    title: "Title 1"
                }, {
                    title: "Title 2"
                }, {
                    title: "Title 3"
                }],
                each: function(array, fn) {
                    var index = -1,
                        length = array.length - 1;

                    while (index++ < length) {
                        if (fn(array[index], index) === false) {
                            return false;
                        }
                    }

                    return array;
                }
            }
        }, function(err, html) {
            var el = document.getElementById("app");
            el.innerHTML = html;
        });


    },
    function(require, exports, module, undefined, global) {
        /* ../src/index.js */

        var template = require(2),
            environment = require(3),
            XMLHttpRequestPolyfill;


        var ejs = module.exports,
            readFile, fs;


        function mixin(a, b) {
            var key, value;

            for (key in b) {
                if (a[key] == null && (value = b[key]) != null) a[key] = value;
            }
            return a;
        }

        if (environment.browser) {
            XMLHttpRequestPolyfill = require(4);

            readFile = function readFile(path, encoding, callback) {
                var xhr = new XMLHttpRequestPolyfill();

                function oncomplete() {
                    var status = +xhr.status;

                    if ((status > 199 && status < 301) || status === 304) {
                        callback(null, xhr.responseText);
                    } else {
                        callback(new Error(status));
                    }
                }

                xhr.addEventListener("load", oncomplete, false);
                xhr.addEventListener("error", oncomplete, false);

                xhr.open("GET", path, true);
                xhr.setRequestHeader("Content-Type", "text/plain");
                xhr.send();
            };
        } else {
            fs = require(5);

            readFile = function readFile(path, encoding, callback) {
                fs.readFile(path, encoding, function(err, data) {
                    if (err) {
                        callback(err);
                        return;
                    }

                    callback(null, data.toString(encoding));
                });
            };
        }


        ejs.templates = {};
        ejs.settings = {
            start: "<%",
            end: "%>",
            interpolate: "=",
            escape: "-"
        };

        ejs.render = function(path, options, callback) {
            var encoding = options.encoding || "utf-8",
                cache = !!options.cache,
                cached = cache ? ejs.templates[path] : null;

            options.locals || (options.locals = {});
            options.settings = mixin(options.settings || {}, ejs.settings);

            if (!cached) {
                readFile(path, encoding, function(err, data) {
                    var fn;

                    if (err) {
                        callback(err);
                        return;
                    }

                    try {
                        fn = template(data, null, options.settings);
                    } catch (e) {
                        callback(e);
                        return;
                    }

                    if (cache) {
                        ejs.templates[path] = fn;
                    }

                    render(fn, options.locals, callback);
                });
            } else {
                render(cached, options.locals, callback);
            }
        };


        function render(temp, locals, callback) {
            var str;

            try {
                str = temp(locals);
            } catch (e) {
                callback(e);
                return;
            }

            callback(null, str);
        }


    },
    function(require, exports, module, undefined, global) {
        /* ../node_modules/@nathanfaucett/template/src/index.js */

        var reEscaper = /\\|'|\r|\n|\t|\u2028|\u2029/g,
            ESCAPES = {
                "'": "'",
                "\\": "\\",
                "\r": "r",
                "\n": "n",
                "\t": "t",
                "\u2028": "u2028",
                "\u2029": "u2029"
            };


        module.exports = template;


        function template(text, data, settings) {
            var templateSettings = template.settings,

                match = "([\\s\\S]+?)",
                source = "__p+='",
                index = 0,

                render, start, end, evaluate, interpolate, escape;

            settings = settings || {};

            for (var key in templateSettings) {
                if (settings[key] == null) {
                    settings[key] = templateSettings[key];
                }
            }

            start = settings.start;
            end = settings.end;

            evaluate = start + match + end;
            interpolate = start + "=" + match + end;
            escape = start + "-" + match + end;

            text.replace(
                new RegExp(escape + "|" + interpolate + "|" + evaluate + "|$", "g"),
                function(match, escape, interpolate, evaluate, offset) {

                    source += text.slice(index, offset).replace(reEscaper, function(match) {
                        return '\\' + ESCAPES[match];
                    });

                    if (escape) {
                        source += "'+\n((__t=(" + escape + "))==null?'':escape(__t))+\n'";
                    }
                    if (interpolate) {
                        source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
                    }
                    if (evaluate) {
                        source += "';\n" + evaluate + "\n__p+='";
                    }

                    index = offset + match.length;

                    return match;
                }
            );
            source += "';\n";

            if (!settings.variable) {
                source = 'with(obj||{}){\n' + source + '}\n';
            }
            source = "var __t,__p='',__j=Array.prototype.join;\n" + source + "return __p;\n";

            try {
                render = new Function(settings.variable || 'obj', source);
            } catch (e) {
                e.source = source;
                throw e;
            }

            return data != null ? render(data) : function temp(data) {
                return render.call(this, data);
            };
        }

        template.settings = {
            start: "<%",
            end: "%>",
            interpolate: "=",
            escape: "-"
        };


    },
    function(require, exports, module, undefined, global) {
        /* ../node_modules/@nathanfaucett/environment/src/index.js */

        var environment = exports,

            hasWindow = typeof(window) !== "undefined",
            userAgent = hasWindow ? window.navigator.userAgent : "";


        environment.worker = typeof(importScripts) !== "undefined";

        environment.browser = environment.worker || !!(
            hasWindow &&
            typeof(navigator) !== "undefined" &&
            window.document
        );

        environment.node = !environment.worker && !environment.browser;

        environment.mobile = environment.browser && /android|webos|iphone|ipad|ipod|blackberry|iemobile|opera mini/i.test(userAgent.toLowerCase());

        environment.window = (
            hasWindow ? window :
            typeof(global) !== "undefined" ? global :
            typeof(self) !== "undefined" ? self : {}
        );

        environment.pixelRatio = environment.window.devicePixelRatio || 1;

        environment.document = typeof(document) !== "undefined" ? document : {};


    },
    function(require, exports, module, undefined, global) {
        /* ../node_modules/@nathanfaucett/xmlhttprequest_polyfill/src/index.js */

        var extend = require(6),
            EventEmitter = require(7),
            EventPolyfill = require(8),
            ProgressEventPolyfill = require(9),
            tryCallFunction = require(10),
            trySetValue = require(11),
            emitEvent = require(12),
            toUint8Array = require(13),
            createNativeXMLHttpRequest = require(14);


        var hasNativeProgress = false,
            XMLHttpRequestPolyfillPrototype;


        module.exports = XMLHttpRequestPolyfill;


        function XMLHttpRequestPolyfill(options) {
            var _this = this,
                nativeXMLHttpRequest = createNativeXMLHttpRequest(options || {});

            EventEmitter.call(this, -1);

            this.__requestHeaders = {};
            this.__nativeXMLHttpRequest = nativeXMLHttpRequest;

            this.onabort = null;
            this.onerror = null;
            this.onload = null;
            this.onloadend = null;
            this.onloadstart = null;
            this.onprogress = null;
            this.onreadystatechange = null;
            this.ontimeout = null;

            this.readyState = 0;
            this.response = "";
            this.responseText = "";
            this.responseType = "";
            this.responseURL = "";
            this.responseXML = null;
            this.status = 0;
            this.statusText = "";
            this.timeout = 0;
            this.withCredentials = false;

            nativeXMLHttpRequest.onreadystatechange = function(e) {
                return XMLHttpRequestPolyfill_onReadyStateChange(_this, e || {});
            };

            nativeXMLHttpRequest.ontimeout = function(e) {
                emitEvent(_this, "timeout", new EventPolyfill("timeout", e || {}));
            };

            nativeXMLHttpRequest.onerror = function(e) {
                emitEvent(_this, "error", new EventPolyfill("error", e || {}));
            };

            if ("onprogress" in nativeXMLHttpRequest) {
                hasNativeProgress = true;
                nativeXMLHttpRequest.onprogress = function(e) {
                    emitEvent(_this, "progress", new ProgressEventPolyfill("progress", e || {}));
                };
            }
        }
        EventEmitter.extend(XMLHttpRequestPolyfill);
        XMLHttpRequestPolyfillPrototype = XMLHttpRequestPolyfill.prototype;


        function XMLHttpRequestPolyfill_onReadyStateChange(_this, e) {
            var nativeXMLHttpRequest = _this.__nativeXMLHttpRequest,
                response;

            _this.status = nativeXMLHttpRequest.status || 0;
            _this.statusText = nativeXMLHttpRequest.statusText || "";
            _this.readyState = nativeXMLHttpRequest.readyState;

            switch (nativeXMLHttpRequest.readyState) {
                case 1:
                    emitEvent(_this, "loadstart", new EventPolyfill("loadstart", e));
                    break;
                case 3:
                    XMLHttpRequestPolyfill_onProgress(_this, e);
                    break;
                case 4:
                    response = nativeXMLHttpRequest.response || "";

                    _this.response = response;

                    if (nativeXMLHttpRequest.responseType !== "arraybuffer") {
                        _this.responseText = nativeXMLHttpRequest.responseText || response;
                        _this.responseXML = nativeXMLHttpRequest.responseXML || response;
                    } else {
                        _this.responseText = "";
                        _this.responseXML = "";
                    }

                    _this.responseType = nativeXMLHttpRequest.responseType || "";
                    _this.responseURL = nativeXMLHttpRequest.responseURL || "";

                    emitEvent(_this, "load", new EventPolyfill("load", e));
                    emitEvent(_this, "loadend", new EventPolyfill("loadend", e));

                    break;
            }

            emitEvent(_this, "readystatechange", new EventPolyfill("readystatechange", e));

            return _this;
        }

        function XMLHttpRequestPolyfill_onProgress(_this, e) {
            var event;

            if (!hasNativeProgress) {
                event = new ProgressEventPolyfill("progress", e);

                event.lengthComputable = false;
                event.loaded = 1;
                event.total = 1;

                emitEvent(_this, "progress", event);

                return event;
            }
        }

        XMLHttpRequestPolyfillPrototype.abort = function() {
            emitEvent(this, "abort", new EventPolyfill("abort", {}));
            tryCallFunction(this.__nativeXMLHttpRequest, "abort");
        };

        XMLHttpRequestPolyfillPrototype.setTimeout = function(ms) {
            this.timeout = ms;
            trySetValue(this.__nativeXMLHttpRequest, "timeout", ms);
        };

        XMLHttpRequestPolyfillPrototype.setWithCredentials = function(value) {
            value = !!value;
            this.withCredentials = value;
            trySetValue(this.__nativeXMLHttpRequest, "withCredentials", value);
        };

        XMLHttpRequestPolyfillPrototype.getAllResponseHeaders = function() {
            return tryCallFunction(this.__nativeXMLHttpRequest, "getAllResponseHeaders");
        };

        XMLHttpRequestPolyfillPrototype.getResponseHeader = function(header) {
            return tryCallFunction(this.__nativeXMLHttpRequest, "getResponseHeader", header);
        };

        XMLHttpRequestPolyfillPrototype.open = function(method, url, async, user, password) {
            if (this.readyState === 0) {
                this.readyState = 1;
                return tryCallFunction(this.__nativeXMLHttpRequest, "open", method, url, async, user, password);
            } else {
                return undefined;
            }
        };

        XMLHttpRequestPolyfillPrototype.overrideMimeType = function(mimetype) {
            tryCallFunction(this.__nativeXMLHttpRequest, "overrideMimeType", mimetype);
        };

        XMLHttpRequestPolyfillPrototype.send = function(data) {
            this.__nativeXMLHttpRequest.responseType = this.responseType;
            tryCallFunction(this.__nativeXMLHttpRequest, "send", data);
        };

        XMLHttpRequestPolyfillPrototype.setRequestHeader = function(key, value) {
            this.__requestHeaders[key] = value;
            tryCallFunction(this.__nativeXMLHttpRequest, "setRequestHeader", key, value);
        };

        XMLHttpRequestPolyfillPrototype.getRequestHeader = function(key) {
            return this.__requestHeaders[key];
        };

        XMLHttpRequestPolyfillPrototype.getRequestHeaders = function() {
            return extend({}, this.__requestHeaders);
        };

        XMLHttpRequestPolyfillPrototype.sendAsBinary = function(string) {
            return this.send(toUint8Array(string));
        };


    },
    function(require, exports, module, undefined, global) {
        /* ../node_modules/@nathanfaucett/comn/src/_empty.js */




    },
    function(require, exports, module, undefined, global) {
        /* ../node_modules/@nathanfaucett/extend/src/index.js */

        var keys = require(15);


        module.exports = extend;


        function extend(out) {
            var i = 0,
                il = arguments.length - 1;

            while (i++ < il) {
                baseExtend(out, arguments[i]);
            }

            return out;
        }

        function baseExtend(a, b) {
            var objectKeys = keys(b),
                i = -1,
                il = objectKeys.length - 1,
                key;

            while (i++ < il) {
                key = objectKeys[i];
                a[key] = b[key];
            }
        }


    },
    function(require, exports, module, undefined, global) {
        /* ../node_modules/@nathanfaucett/event_emitter/src/index.js */

        var isFunction = require(21),
            inherits = require(27),
            fastSlice = require(28),
            keys = require(15),
            isNumber = require(29),
            isNullOrUndefined = require(18);


        var EventEmitterPrototype;


        module.exports = EventEmitter;


        function EventEmitter(maxListeners) {
            this.__events = {};
            this.__maxListeners = isNumber(maxListeners) ? +maxListeners : EventEmitter.defaultMaxListeners;
        }
        EventEmitterPrototype = EventEmitter.prototype;

        EventEmitterPrototype.on = function(name, listener) {
            var events, eventList, maxListeners;

            if (!isFunction(listener)) {
                throw new TypeError("EventEmitter.on(name, listener) listener must be a function");
            }

            events = this.__events || (this.__events = {});
            eventList = (events[name] || (events[name] = []));
            maxListeners = this.__maxListeners || -1;

            eventList[eventList.length] = listener;

            if (maxListeners !== -1 && eventList.length > maxListeners) {
                console.error(
                    "EventEmitter.on(type, listener) possible EventEmitter memory leak detected. " + maxListeners + " listeners added"
                );
            }

            return this;
        };

        EventEmitterPrototype.addEventListener = EventEmitterPrototype.addListener = EventEmitterPrototype.on;

        EventEmitterPrototype.once = function(name, listener) {
            var _this = this;

            function once() {

                _this.off(name, once);

                switch (arguments.length) {
                    case 0:
                        return listener();
                    case 1:
                        return listener(arguments[0]);
                    case 2:
                        return listener(arguments[0], arguments[1]);
                    case 3:
                        return listener(arguments[0], arguments[1], arguments[2]);
                    case 4:
                        return listener(arguments[0], arguments[1], arguments[2], arguments[3]);
                    default:
                        return listener.apply(null, arguments);
                }
            }

            this.on(name, once);

            return once;
        };

        EventEmitterPrototype.listenTo = function(value, name) {
            var _this = this;

            if (!value || !(isFunction(value.on) || isFunction(value.addListener))) {
                throw new TypeError("EventEmitter.listenTo(value, name) value must have a on function taking (name, listener[, ctx])");
            }

            function handler() {
                _this.emitArgs(name, arguments);
            }

            value.on(name, handler);

            return handler;
        };

        EventEmitterPrototype.off = function(name, listener) {
            var events = this.__events || (this.__events = {}),
                eventList, event, i;

            eventList = events[name];
            if (!eventList) {
                return this;
            }

            if (!listener) {
                i = eventList.length;

                while (i--) {
                    this.emit("removeListener", name, eventList[i]);
                }
                eventList.length = 0;
                delete events[name];
            } else {
                i = eventList.length;

                while (i--) {
                    event = eventList[i];

                    if (event === listener) {
                        this.emit("removeListener", name, event);
                        eventList.splice(i, 1);
                    }
                }

                if (eventList.length === 0) {
                    delete events[name];
                }
            }

            return this;
        };

        EventEmitterPrototype.removeEventListener = EventEmitterPrototype.removeListener = EventEmitterPrototype.off;

        EventEmitterPrototype.removeAllListeners = function() {
            var events = this.__events || (this.__events = {}),
                objectKeys = keys(events),
                i = -1,
                il = objectKeys.length - 1,
                key, eventList, j;

            while (i++ < il) {
                key = objectKeys[i];
                eventList = events[key];

                if (eventList) {
                    j = eventList.length;

                    while (j--) {
                        this.emit("removeListener", key, eventList[j]);
                        eventList.splice(j, 1);
                    }
                }

                delete events[key];
            }

            return this;
        };

        EventEmitterPrototype.dispatchEvent = function(event) {
            return this.emitArg(event.type, event);
        };

        EventEmitterPrototype.attachEvent = function(type, listener) {
            return this.on(type.slice(2), listener);
        };

        EventEmitterPrototype.detachEvent = function(type, listener) {
            return this.off(type.slice(2), listener);
        };

        EventEmitterPrototype.fireEvent = function(type, event) {
            return this.emitArg(type.slice(2), event);
        };

        function emit0(eventList) {
            var i = -1,
                il = eventList.length - 1,
                event;

            while (i++ < il) {
                if ((event = eventList[i])) {
                    event();
                }
            }
        }

        function emit1(eventList, a0) {
            var i = -1,
                il = eventList.length - 1,
                event;

            while (i++ < il) {
                if ((event = eventList[i])) {
                    event(a0);
                }
            }
        }

        function emit2(eventList, args) {
            var a0 = args[0],
                a1 = args[1],
                i = -1,
                il = eventList.length - 1,
                event;

            while (i++ < il) {
                if ((event = eventList[i])) {
                    event(a0, a1);
                }
            }
        }

        function emit3(eventList, args) {
            var a0 = args[0],
                a1 = args[1],
                a2 = args[2],
                i = -1,
                il = eventList.length - 1,
                event;

            while (i++ < il) {
                if ((event = eventList[i])) {
                    event(a0, a1, a2);
                }
            }
        }

        function emit4(eventList, args) {
            var a0 = args[0],
                a1 = args[1],
                a2 = args[2],
                a3 = args[3],
                i = -1,
                il = eventList.length - 1,
                event;

            while (i++ < il) {
                if ((event = eventList[i])) {
                    event(a0, a1, a2, a3);
                }
            }
        }

        function emit5(eventList, args) {
            var a0 = args[0],
                a1 = args[1],
                a2 = args[2],
                a3 = args[3],
                a4 = args[4],
                i = -1,
                il = eventList.length - 1,
                event;

            while (i++ < il) {
                if ((event = eventList[i])) {
                    event(a0, a1, a2, a3, a4);
                }
            }
        }

        function emitApply(eventList, args) {
            var i = -1,
                il = eventList.length - 1,
                event;

            while (i++ < il) {
                if ((event = eventList[i])) {
                    event.apply(null, args);
                }
            }
        }

        function emit(eventList, args) {
            switch (args.length) {
                case 0:
                    emit0(eventList);
                    break;
                case 1:
                    emit1(eventList, args[0]);
                    break;
                case 2:
                    emit2(eventList, args);
                    break;
                case 3:
                    emit3(eventList, args);
                    break;
                case 4:
                    emit4(eventList, args);
                    break;
                case 5:
                    emit5(eventList, args);
                    break;
                default:
                    emitApply(eventList, args);
                    break;
            }
        }

        EventEmitterPrototype.emitArg = function(name, arg) {
            var eventList = (this.__events || (this.__events = {}))[name];

            if (!eventList || !eventList.length) {
                return this;
            } else {
                emit1(eventList, arg);
                return this;
            }
        };

        EventEmitterPrototype.emitArgs = function(name, args) {
            var eventList = (this.__events || (this.__events = {}))[name];

            if (!eventList || !eventList.length) {
                return this;
            } else {
                emit(eventList, args);
                return this;
            }
        };

        EventEmitterPrototype.emit = function(name) {
            return this.emitArgs(name, fastSlice(arguments, 1));
        };

        function createFunctionCaller(args) {
            var a0, a1, a2, a3, a4;
            switch (args.length) {
                case 0:
                    return function functionCaller(fn) {
                        return fn();
                    };
                case 1:
                    a0 = args[0];
                    return function functionCaller(fn) {
                        return fn(a0);
                    };
                case 2:
                    a0 = args[0];
                    a1 = args[1];
                    return function functionCaller(fn) {
                        return fn(a0, a1);
                    };
                case 3:
                    a0 = args[0];
                    a1 = args[1];
                    a2 = args[2];
                    return function functionCaller(fn) {
                        return fn(a0, a1, a2);
                    };
                case 4:
                    a0 = args[0];
                    a1 = args[1];
                    a2 = args[2];
                    a3 = args[3];
                    return function functionCaller(fn) {
                        return fn(a0, a1, a2, a3);
                    };
                case 5:
                    a0 = args[0];
                    a1 = args[1];
                    a2 = args[2];
                    a3 = args[3];
                    a4 = args[4];
                    return function functionCaller(fn) {
                        return fn(a0, a1, a2, a3, a4);
                    };
                default:
                    return function functionCaller(fn) {
                        return fn.apply(null, args);
                    };
            }
        }

        function emitAsync(eventList, args, callback) {
            var length = eventList.length,
                index = 0,
                called = false,
                functionCaller;

            function next(error) {
                if (called !== true) {
                    if (error || index === length) {
                        called = true;
                        callback(error);
                    } else {
                        functionCaller(eventList[index++]);
                    }
                }
            }

            args[args.length] = next;
            functionCaller = createFunctionCaller(args);
            next();
        }

        EventEmitterPrototype.emitAsync = function(name, args, callback) {
            var eventList = (this.__events || (this.__events = {}))[name];

            args = fastSlice(arguments, 1);
            callback = args.pop();

            if (!isFunction(callback)) {
                throw new TypeError("EventEmitter.emitAsync(name [, ...args], callback) callback must be a function");
            } else {
                if (!eventList || !eventList.length) {
                    callback();
                } else {
                    emitAsync(eventList, args, callback);
                }
                return this;
            }
        };

        EventEmitterPrototype.listeners = function(name) {
            var eventList = (this.__events || (this.__events = {}))[name];
            return eventList ? eventList.slice() : [];
        };

        EventEmitterPrototype.listenerCount = function(name) {
            var eventList = (this.__events || (this.__events = {}))[name];
            return eventList ? eventList.length : 0;
        };

        EventEmitterPrototype.setMaxListeners = function(value) {
            if ((value = +value) !== value) {
                throw new TypeError("EventEmitter.setMaxListeners(value) value must be a number");
            }

            this.__maxListeners = value < 0 ? -1 : value;
            return this;
        };

        inherits.defineProperty(EventEmitter, "defaultMaxListeners", 10);

        inherits.defineProperty(EventEmitter, "listeners", function(value, name) {
            var eventList;

            if (isNullOrUndefined(value)) {
                throw new TypeError("EventEmitter.listeners(value, name) value required");
            }
            eventList = value.__events && value.__events[name];

            return eventList ? eventList.slice() : [];
        });

        inherits.defineProperty(EventEmitter, "listenerCount", function(value, name) {
            var eventList;

            if (isNullOrUndefined(value)) {
                throw new TypeError("EventEmitter.listenerCount(value, name) value required");
            }
            eventList = value.__events && value.__events[name];

            return eventList ? eventList.length : 0;
        });

        inherits.defineProperty(EventEmitter, "setMaxListeners", function(value) {
            if ((value = +value) !== value) {
                throw new TypeError("EventEmitter.setMaxListeners(value) value must be a number");
            }

            EventEmitter.defaultMaxListeners = value < 0 ? -1 : value;
            return value;
        });

        EventEmitter.extend = function(child) {
            inherits(child, this);
            return child;
        };


    },
    function(require, exports, module, undefined, global) {
        /* ../node_modules/@nathanfaucett/xmlhttprequest_polyfill/src/EventPolyfill.js */

        var tryCallFunction = require(10);


        var EventPolyfillPrototype;


        module.exports = EventPolyfill;


        function EventPolyfill(type, nativeEvent) {

            this.__nativeEvent = nativeEvent;

            this.type = type;
            this.bubbles = nativeEvent.bubbles;
            this.cancelBubble = nativeEvent.cancelBubble;
            this.cancelable = nativeEvent.cancelable;
            this.currentTarget = nativeEvent.currentTarget;
            this.defaultPrevented = nativeEvent.defaultPrevented;
            this.eventPhase = nativeEvent.eventPhase;
            this.isTrusted = nativeEvent.isTrusted;
            this.path = nativeEvent.path;
            this.returnValue = nativeEvent.returnValue;
            this.srcElement = nativeEvent.srcElement;
            this.target = nativeEvent.target;
            this.timeStamp = nativeEvent.timeStamp;
        }
        EventPolyfillPrototype = EventPolyfill.prototype;

        EventPolyfillPrototype.AT_TARGET = 2;
        EventPolyfillPrototype.BLUR = 8192;
        EventPolyfillPrototype.BUBBLING_PHASE = 3;
        EventPolyfillPrototype.CAPTURING_PHASE = 1;
        EventPolyfillPrototype.CHANGE = 32768;
        EventPolyfillPrototype.CLICK = 64;
        EventPolyfillPrototype.DBLCLICK = 128;
        EventPolyfillPrototype.DRAGDROP = 2048;
        EventPolyfillPrototype.FOCUS = 4096;
        EventPolyfillPrototype.KEYDOWN = 256;
        EventPolyfillPrototype.KEYPRESS = 1024;
        EventPolyfillPrototype.KEYUP = 512;
        EventPolyfillPrototype.MOUSEDOWN = 1;
        EventPolyfillPrototype.MOUSEDRAG = 32;
        EventPolyfillPrototype.MOUSEMOVE = 16;
        EventPolyfillPrototype.MOUSEOUT = 8;
        EventPolyfillPrototype.MOUSEOVER = 4;
        EventPolyfillPrototype.MOUSEUP = 2;
        EventPolyfillPrototype.NONE = 0;
        EventPolyfillPrototype.SELECT = 16384;

        EventPolyfillPrototype.preventDefault = function() {
            return tryCallFunction(this.__nativeEvent, "preventDefault");
        };

        EventPolyfillPrototype.stopImmediatePropagation = function() {
            return tryCallFunction(this.__nativeEvent, "stopImmediatePropagation");
        };

        EventPolyfillPrototype.stopPropagation = function() {
            return tryCallFunction(this.__nativeEvent, "stopPropagation");
        };


    },
    function(require, exports, module, undefined, global) {
        /* ../node_modules/@nathanfaucett/xmlhttprequest_polyfill/src/ProgressEventPolyfill.js */

        var inherits = require(27),
            EventPolyfill = require(8);


        module.exports = ProgressEventPolyfill;


        function ProgressEventPolyfill(type, nativeEvent) {

            EventPolyfill.call(this, type, nativeEvent);

            this.lengthComputable = nativeEvent.lengthComputable;
            this.loaded = nativeEvent.loaded;
            this.total = nativeEvent.total;
        }
        inherits(ProgressEventPolyfill, EventPolyfill);


    },
    function(require, exports, module, undefined, global) {
        /* ../node_modules/@nathanfaucett/xmlhttprequest_polyfill/src/tryCallFunction.js */

        module.exports = tryCallFunction;


        function tryCallFunction(object, name, a0, a1, a2, a3, a4) {
            try {
                return object[name](a0, a1, a2, a3, a4);
            } catch (e) {}
        }


    },
    function(require, exports, module, undefined, global) {
        /* ../node_modules/@nathanfaucett/xmlhttprequest_polyfill/src/trySetValue.js */

        module.exports = trySetValue;


        function trySetValue(object, name, key, value) {
            try {
                return (object[name][key] = value);
            } catch (e) {}
        }


    },
    function(require, exports, module, undefined, global) {
        /* ../node_modules/@nathanfaucett/xmlhttprequest_polyfill/src/emitEvent.js */

        module.exports = emitEvent;


        function emitEvent(object, type, event) {
            var onevent = "on" + type;

            if (object[onevent]) {
                object[onevent](event);
            }

            object.emitArg(type, event);
        }


    },
    function(require, exports, module, undefined, global) {
        /* ../node_modules/@nathanfaucett/xmlhttprequest_polyfill/src/toUint8Array.js */

        var environment = require(3);


        var Uint8Array = environment.window.Uint8Array || Array;


        module.exports = toUint8Array;


        function toUint8Array(string) {
            var length = string.length,
                ui8 = new Uint8Array(length),
                i = -1,
                il = length - 1;

            while (i++ < il) {
                ui8[i] = string.charCodeAt(i) & 0xff;
            }

            return ui8;
        }


    },
    function(require, exports, module, undefined, global) {
        /* ../node_modules/@nathanfaucett/xmlhttprequest_polyfill/src/createNativeXMLHttpRequest.js */

        var environment = require(3);


        var window = environment.window,
            NativeXMLHttpRequest = window.XMLHttpRequest,

            createNativeXMLHttpRequest, NativeActiveXObjectType;


        if (NativeXMLHttpRequest) {
            createNativeXMLHttpRequest = function createNativeXMLHttpRequest(options) {
                return new NativeXMLHttpRequest(options);
            };
        } else {
            (function getNativeActiveXObject(types) {
                var NativeActiveXObject = window.ActiveXObject,
                    i = -1,
                    il = types.length - 1,
                    instance, type;

                while (i++ < il) {
                    try {
                        type = types[i];
                        instance = new NativeActiveXObject(type);
                        break;
                    } catch (e) {}
                    type = null;
                }

                if (!type) {
                    throw new Error("XMLHttpRequest not supported by this browser");
                }

                NativeActiveXObjectType = type;
            }([
                "Msxml2.XMLHTTP",
                "Msxml3.XMLHTTP",
                "Microsoft.XMLHTTP"
            ]));

            createNativeXMLHttpRequest = function createNativeXMLHttpRequest() {
                return new NativeActiveXObject(NativeActiveXObjectType);
            };
        }


        module.exports = createNativeXMLHttpRequest;


    },
    function(require, exports, module, undefined, global) {
        /* ../node_modules/@nathanfaucett/keys/src/index.js */

        var has = require(16),
            isNative = require(17),
            isNullOrUndefined = require(18),
            isObject = require(19);


        var nativeKeys = Object.keys;


        module.exports = keys;


        function keys(value) {
            if (isNullOrUndefined(value)) {
                return [];
            } else {
                return nativeKeys(isObject(value) ? value : Object(value));
            }
        }

        if (!isNative(nativeKeys)) {
            nativeKeys = function keys(value) {
                var localHas = has,
                    out = [],
                    i = 0,
                    key;

                for (key in value) {
                    if (localHas(value, key)) {
                        out[i++] = key;
                    }
                }

                return out;
            };
        }


    },
    function(require, exports, module, undefined, global) {
        /* ../node_modules/@nathanfaucett/has/src/index.js */

        var isNative = require(17),
            getPrototypeOf = require(20),
            isNullOrUndefined = require(18);


        var nativeHasOwnProp = Object.prototype.hasOwnProperty,
            baseHas;


        module.exports = has;


        function has(object, key) {
            if (isNullOrUndefined(object)) {
                return false;
            } else {
                return baseHas(object, key);
            }
        }

        if (isNative(nativeHasOwnProp)) {
            baseHas = function baseHas(object, key) {
                if (object.hasOwnProperty) {
                    return object.hasOwnProperty(key);
                } else {
                    return nativeHasOwnProp.call(object, key);
                }
            };
        } else {
            baseHas = function baseHas(object, key) {
                var proto = getPrototypeOf(object);

                if (isNullOrUndefined(proto)) {
                    return key in object;
                } else {
                    return (key in object) && (!(key in proto) || proto[key] !== object[key]);
                }
            };
        }


    },
    function(require, exports, module, undefined, global) {
        /* ../node_modules/@nathanfaucett/is_native/src/index.js */

        var isFunction = require(21),
            isNullOrUndefined = require(18),
            escapeRegExp = require(22);


        var reHostCtor = /^\[object .+?Constructor\]$/,

            functionToString = Function.prototype.toString,

            reNative = RegExp("^" +
                escapeRegExp(Object.prototype.toString)
                .replace(/toString|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
            ),

            isHostObject;


        module.exports = isNative;


        function isNative(value) {
            return !isNullOrUndefined(value) && (
                isFunction(value) ?
                reNative.test(functionToString.call(value)) : (
                    typeof(value) === "object" && (
                        (isHostObject(value) ? reNative : reHostCtor).test(value) || false
                    )
                )
            ) || false;
        }

        try {
            String({
                "toString": 0
            } + "");
        } catch (e) {
            isHostObject = function isHostObject() {
                return false;
            };
        }

        isHostObject = function isHostObject(value) {
            return !isFunction(value.toString) && typeof(value + "") === "string";
        };


    },
    function(require, exports, module, undefined, global) {
        /* ../node_modules/@nathanfaucett/is_null_or_undefined/src/index.js */

        var isNull = require(23),
            isUndefined = require(24);


        module.exports = isNullOrUndefined;

        /**
          isNullOrUndefined accepts any value and returns true
          if the value is null or undefined. For all other values
          false is returned.
          
          @param {Any}        any value to test
          @returns {Boolean}  the boolean result of testing value

          @example
            isNullOrUndefined(null);   // returns true
            isNullOrUndefined(undefined);   // returns true
            isNullOrUndefined("string");    // returns false
        **/
        function isNullOrUndefined(value) {
            return isNull(value) || isUndefined(value);
        }


    },
    function(require, exports, module, undefined, global) {
        /* ../node_modules/@nathanfaucett/is_object/src/index.js */

        var isNull = require(23);


        module.exports = isObject;


        function isObject(value) {
            var type = typeof(value);
            return type === "function" || (!isNull(value) && type === "object") || false;
        }


    },
    function(require, exports, module, undefined, global) {
        /* ../node_modules/@nathanfaucett/get_prototype_of/src/index.js */

        var isObject = require(19),
            isNative = require(17),
            isNullOrUndefined = require(18);


        var nativeGetPrototypeOf = Object.getPrototypeOf,
            baseGetPrototypeOf;


        module.exports = getPrototypeOf;


        function getPrototypeOf(value) {
            if (isNullOrUndefined(value)) {
                return null;
            } else {
                return baseGetPrototypeOf(value);
            }
        }

        if (isNative(nativeGetPrototypeOf)) {
            baseGetPrototypeOf = function baseGetPrototypeOf(value) {
                return nativeGetPrototypeOf(isObject(value) ? value : Object(value)) || null;
            };
        } else {
            if ("".__proto__ === String.prototype) {
                baseGetPrototypeOf = function baseGetPrototypeOf(value) {
                    return value.__proto__ || null;
                };
            } else {
                baseGetPrototypeOf = function baseGetPrototypeOf(value) {
                    return value.constructor ? value.constructor.prototype : null;
                };
            }
        }


    },
    function(require, exports, module, undefined, global) {
        /* ../node_modules/@nathanfaucett/is_function/src/index.js */

        var objectToString = Object.prototype.toString,
            isFunction;


        if (objectToString.call(function() {}) === "[object Object]") {
            isFunction = function isFunction(value) {
                return value instanceof Function;
            };
        } else if (typeof(/./) === "function" || (typeof(Uint8Array) !== "undefined" && typeof(Uint8Array) !== "function")) {
            isFunction = function isFunction(value) {
                return objectToString.call(value) === "[object Function]";
            };
        } else {
            isFunction = function isFunction(value) {
                return typeof(value) === "function" || false;
            };
        }


        module.exports = isFunction;


    },
    function(require, exports, module, undefined, global) {
        /* ../node_modules/@nathanfaucett/escape_regexp/src/index.js */

        var toString = require(25);


        var reRegExpChars = /[.*+?\^${}()|\[\]\/\\]/g,
            reHasRegExpChars = new RegExp(reRegExpChars.source);


        module.exports = escapeRegExp;


        function escapeRegExp(string) {
            string = toString(string);
            return (
                (string && reHasRegExpChars.test(string)) ?
                string.replace(reRegExpChars, "\\$&") :
                string
            );
        }


    },
    function(require, exports, module, undefined, global) {
        /* ../node_modules/@nathanfaucett/is_null/src/index.js */

        module.exports = isNull;


        function isNull(value) {
            return value === null;
        }


    },
    function(require, exports, module, undefined, global) {
        /* ../node_modules/@nathanfaucett/is_undefined/src/index.js */

        module.exports = isUndefined;


        function isUndefined(value) {
            return value === void(0);
        }


    },
    function(require, exports, module, undefined, global) {
        /* ../node_modules/@nathanfaucett/to_string/src/index.js */

        var isString = require(26),
            isNullOrUndefined = require(18);


        module.exports = toString;


        function toString(value) {
            if (isString(value)) {
                return value;
            } else if (isNullOrUndefined(value)) {
                return "";
            } else {
                return value + "";
            }
        }


    },
    function(require, exports, module, undefined, global) {
        /* ../node_modules/@nathanfaucett/is_string/src/index.js */

        module.exports = isString;


        function isString(value) {
            return typeof(value) === "string" || false;
        }


    },
    function(require, exports, module, undefined, global) {
        /* ../node_modules/@nathanfaucett/inherits/src/index.js */

        var create = require(30),
            extend = require(6),
            mixin = require(31),
            defineProperty = require(32);


        var descriptor = {
            configurable: true,
            enumerable: false,
            writable: true,
            value: null
        };


        module.exports = inherits;


        function inherits(child, parent) {

            mixin(child, parent);

            if (child.__super) {
                child.prototype = extend(create(parent.prototype), child.__super, child.prototype);
            } else {
                child.prototype = extend(create(parent.prototype), child.prototype);
            }

            defineNonEnumerableProperty(child, "__super", parent.prototype);
            defineNonEnumerableProperty(child.prototype, "constructor", child);

            child.defineStatic = defineStatic;
            child.super_ = parent;

            return child;
        }
        inherits.defineProperty = defineNonEnumerableProperty;

        function defineNonEnumerableProperty(object, name, value) {
            descriptor.value = value;
            defineProperty(object, name, descriptor);
            descriptor.value = null;
        }

        function defineStatic(name, value) {
            defineNonEnumerableProperty(this, name, value);
        }


    },
    function(require, exports, module, undefined, global) {
        /* ../node_modules/@nathanfaucett/fast_slice/src/index.js */

        var clamp = require(34),
            isNumber = require(29);


        module.exports = fastSlice;


        function fastSlice(array, offset) {
            var length = array.length,
                newLength, i, il, result, j;

            offset = clamp(isNumber(offset) ? offset : 0, 0, length);
            i = offset - 1;
            il = length - 1;
            newLength = length - offset;
            result = new Array(newLength);
            j = 0;

            while (i++ < il) {
                result[j++] = array[i];
            }

            return result;
        }


    },
    function(require, exports, module, undefined, global) {
        /* ../node_modules/@nathanfaucett/is_number/src/index.js */

        module.exports = isNumber;


        function isNumber(value) {
            return typeof(value) === "number" || false;
        }


    },
    function(require, exports, module, undefined, global) {
        /* ../node_modules/@nathanfaucett/create/src/index.js */

        var isNull = require(23),
            isNative = require(17),
            isPrimitive = require(33);


        var nativeCreate = Object.create;


        module.exports = create;


        function create(object) {
            return nativeCreate(isPrimitive(object) ? null : object);
        }

        if (!isNative(nativeCreate)) {
            nativeCreate = function nativeCreate(object) {
                var newObject;

                function F() {
                    this.constructor = F;
                }

                if (isNull(object)) {
                    F.prototype = null;
                    newObject = new F();
                    newObject.constructor = newObject.__proto__ = null;
                    delete newObject.__proto__;
                    return newObject;
                } else {
                    F.prototype = object;
                    return new F();
                }
            };
        }


        module.exports = create;


    },
    function(require, exports, module, undefined, global) {
        /* ../node_modules/@nathanfaucett/mixin/src/index.js */

        var keys = require(15),
            isNullOrUndefined = require(18);


        module.exports = mixin;


        function mixin(out) {
            var i = 0,
                il = arguments.length - 1;

            while (i++ < il) {
                baseMixin(out, arguments[i]);
            }

            return out;
        }

        function baseMixin(a, b) {
            var objectKeys = keys(b),
                i = -1,
                il = objectKeys.length - 1,
                key, value;

            while (i++ < il) {
                key = objectKeys[i];

                if (isNullOrUndefined(a[key]) && !isNullOrUndefined((value = b[key]))) {
                    a[key] = value;
                }
            }
        }


    },
    function(require, exports, module, undefined, global) {
        /* ../node_modules/@nathanfaucett/define_property/src/index.js */

        var isObject = require(19),
            isFunction = require(21),
            isPrimitive = require(33),
            isNative = require(17),
            has = require(16);


        var nativeDefineProperty = Object.defineProperty;


        module.exports = defineProperty;


        function defineProperty(object, name, descriptor) {
            if (isPrimitive(descriptor) || isFunction(descriptor)) {
                descriptor = {
                    value: descriptor
                };
            }
            return nativeDefineProperty(object, name, descriptor);
        }

        defineProperty.hasGettersSetters = true;

        if (!isNative(nativeDefineProperty) || !(function() {
                var object = {},
                    value = {};

                try {
                    nativeDefineProperty(object, "key", {
                        value: value
                    });
                    if (has(object, "key") && object.key === value) {
                        return true;
                    } else {
                        return false;
                    }
                } catch (e) {}

                return false;
            }())) {

            defineProperty.hasGettersSetters = false;

            nativeDefineProperty = function defineProperty(object, name, descriptor) {
                if (!isObject(object)) {
                    throw new TypeError("defineProperty(object, name, descriptor) called on non-object");
                }
                if (has(descriptor, "get") || has(descriptor, "set")) {
                    throw new TypeError("defineProperty(object, name, descriptor) this environment does not support getters or setters");
                }
                object[name] = descriptor.value;
            };
        }


    },
    function(require, exports, module, undefined, global) {
        /* ../node_modules/@nathanfaucett/is_primitive/src/index.js */

        var isNullOrUndefined = require(18);


        module.exports = isPrimitive;


        function isPrimitive(obj) {
            var typeStr;
            return isNullOrUndefined(obj) || ((typeStr = typeof(obj)) !== "object" && typeStr !== "function") || false;
        }


    },
    function(require, exports, module, undefined, global) {
        /* ../node_modules/@nathanfaucett/clamp/src/index.js */

        module.exports = clamp;


        function clamp(x, min, max) {
            if (x < min) {
                return min;
            } else if (x > max) {
                return max;
            } else {
                return x;
            }
        }


    }
], null, void(0), (new Function("return this;"))()));
